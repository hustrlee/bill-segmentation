# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bill_segmentation.models.base_model_ import Model
from bill_segmentation.models.roi_pts_dto_pts import RoiPtsDtoPts
from bill_segmentation import util

from bill_segmentation.models.roi_pts_dto_pts import RoiPtsDtoPts  # noqa: E501

class RoiPtsDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pts=None):  # noqa: E501
        """RoiPtsDto - a model defined in OpenAPI

        :param pts: The pts of this RoiPtsDto.  # noqa: E501
        :type pts: List[RoiPtsDtoPts]
        """
        self.openapi_types = {
            'pts': List[RoiPtsDtoPts]
        }

        self.attribute_map = {
            'pts': 'pts'
        }

        self._pts = pts

    @classmethod
    def from_dict(cls, dikt) -> 'RoiPtsDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The roiPtsDto of this RoiPtsDto.  # noqa: E501
        :rtype: RoiPtsDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pts(self):
        """Gets the pts of this RoiPtsDto.


        :return: The pts of this RoiPtsDto.
        :rtype: List[RoiPtsDtoPts]
        """
        return self._pts

    @pts.setter
    def pts(self, pts):
        """Sets the pts of this RoiPtsDto.


        :param pts: The pts of this RoiPtsDto.
        :type pts: List[RoiPtsDtoPts]
        """
        if pts is not None and len(pts) > 4:
            raise ValueError("Invalid value for `pts`, number of items must be less than or equal to `4`")  # noqa: E501
        if pts is not None and len(pts) < 4:
            raise ValueError("Invalid value for `pts`, number of items must be greater than or equal to `4`")  # noqa: E501

        self._pts = pts
